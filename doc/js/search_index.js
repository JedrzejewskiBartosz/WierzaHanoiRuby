var search_data = {"index":{"searchIndex":["board","level","stone","add_stone_to_level()","bottom_pins()","check_end()","check_stone_on_top()","get_depth()","get_stone_on_pin()","get_stone_on_top()","get_stone_pin()","move_stone()","new()","new()","new()","put_stone_on_top()","shift_animation()","show_board()","show_level()","solve()","stone_down()","stone_up()","stone_width()","top_pins()","license","readme"],"longSearchIndex":["board","level","stone","level#add_stone_to_level()","board#bottom_pins()","board#check_end()","board#check_stone_on_top()","board#get_depth()","level#get_stone_on_pin()","board#get_stone_on_top()","level#get_stone_pin()","board#move_stone()","board::new()","level::new()","stone::new()","board#put_stone_on_top()","board#shift_animation()","board#show_board()","level#show_level()","board#solve()","board#stone_down()","board#stone_up()","level#stone_width()","board#top_pins()","",""],"info":[["Board","","Board.html","","<p>Representation of the Tower of Hanoi game board.\n<p>This class manages the board composed of multiple levels ‚Ä¶\n"],["Level","","Level.html","","<p>Logical representation of one level of the Tower of Hanoi\n<p>This class holds an array of 3 stones, each ‚Ä¶\n"],["Stone","","Stone.html","","<p>Representation of one stone in Tower of Hanoi puzzles\n<p>This class holds a width of the stone\n<p>@!attribute ‚Ä¶\n"],["add_stone_to_level","Level","Level.html#method-i-add_stone_to_level","(pin,stone)","<p>Adds stone to the specified pin on the level\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @param ‚Ä¶\n"],["bottom_pins","Board","Board.html#method-i-bottom_pins","()","<p>Prints the bottom line of the board\n"],["check_end","Board","Board.html#method-i-check_end","()","<p>Checks whether the game is complete.\n<p>@return [Boolean] True if only the last pin has stones.\n"],["check_stone_on_top","Board","Board.html#method-i-check_stone_on_top","(pin)","<p>Check and returns the stone at the top of pin.\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). ‚Ä¶\n"],["get_depth","Board","Board.html#method-i-get_depth","(pin)","<p>Returns the number of empty slots on a pin.\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @return ‚Ä¶\n"],["get_stone_on_pin","Level","Level.html#method-i-get_stone_on_pin","(pin)","<p>Returns the stone on the specified pin\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @return ‚Ä¶\n"],["get_stone_on_top","Board","Board.html#method-i-get_stone_on_top","(pin)","<p>Removes and returns the top stone from a pin.\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @return ‚Ä¶\n"],["get_stone_pin","Level","Level.html#method-i-get_stone_pin","(stone)","<p>Returns the pin index of stone on the level\n<p>@param stone [Stone] The stone whose index should be found. ‚Ä¶\n"],["move_stone","Board","Board.html#method-i-move_stone","(from_pin,to_pin)","<p>Attempts to move a stone from one pin to another.\n<p>The method checks whether the move is valid (i.e., the ‚Ä¶\n"],["new","Board","Board.html#method-c-new","(stones)",""],["new","Level","Level.html#method-c-new","()",""],["new","Stone","Stone.html#method-c-new","(width)",""],["put_stone_on_top","Board","Board.html#method-i-put_stone_on_top","(pin,stone)","<p>Places a stone on top of a pin\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @param stone [Stone] ‚Ä¶\n"],["shift_animation","Board","Board.html#method-i-shift_animation","(from_pin,to_pin, stone)","<p>Animates the shifting of a stone from one pin to another.\n<p>@param from_pin [Integer] The starting pin index. ‚Ä¶\n"],["show_board","Board","Board.html#method-i-show_board","()","<p>Displays the entire board.\n"],["show_level","Level","Level.html#method-i-show_level","(width)","<p>Prints a visual representation of one level of the Tower of Hanoi\n<p>Each stone is centered on its pin using ‚Ä¶\n"],["solve","Board","Board.html#method-i-solve","()","<p>Solves the Tower of Hanoi puzzle automatically using an iterative algorithm.\n<p>For even numbers of stones, ‚Ä¶\n"],["stone_down","Board","Board.html#method-i-stone_down","(pin,stone)","<p>Animation the descent of a stone\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @param stone [Stone] ‚Ä¶\n"],["stone_up","Board","Board.html#method-i-stone_up","(pin, stone)","<p>Animation the lifting of a stone\n<p>@param pin [Integer] The index of the pin (0, 1 or 2). @param stone [Stone] ‚Ä¶\n"],["stone_width","Level","Level.html#method-i-stone_width","()","<p>Returns a maximum width among all stones on the level\n<p>@return [Integer] The width of the widest stone. ‚Ä¶\n"],["top_pins","Board","Board.html#method-i-top_pins","()","<p>Prints the top line of the board\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright ¬© 2025 Bartosz Jƒôdrzejewski\n<p>Permission is hereby granted, free of charge, to any ‚Ä¶\n"],["README","","README_md.html","","<p>üèóÔ∏è Animowana Wie≈ºa Hanoi w Ruby\n<p>üìã Opis\n<p>Ten projekt to wizualizacja i automatyczne rozwiƒÖzanie klasycznego ‚Ä¶\n"]]}}